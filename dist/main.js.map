{"version":3,"file":"main.js","mappings":"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","sources":["webpack://capybaby/./src/scripts/tile.js","webpack://capybaby/./src/index.js","webpack://capybaby/./src/scripts/game.js","webpack://capybaby/./src/scripts/raft.js","webpack://capybaby/./src/scripts/player.js","webpack://capybaby/./src/scripts/view.js"],"sourcesContent":["class Tile {\n    constructor(x, y, color) {\n        this.x = x;\n        this.y = y;\n        this.color = color;\n        this.originalColor = color;\n        this.status = 'floating'\n    }\n\n    flash() {\n        this.color = Tile.FLASHING\n        this.status = 'flashing'\n    }\n\n    flashing() {\n        return this.color === Tile.FLASHING\n    }\n\n    sink() {\n        this.color = Tile.SUNK;\n        this.status = 'sunk'\n    }\n}\n\nTile.FLASHING = '#FF0000'\nTile.SUNK = '#FFFFFF'\n\nexport default Tile;","import View from \"./scripts/view\"\nimport Raft from \"./scripts/raft\"\nimport Player from \"./scripts/player\"\nimport Game from \"./scripts/game\"\n\n//setting up canvas & context\nconst canvas = document.querySelector('canvas')\ncanvas.width = window.innerWidth;\ncanvas.height = window.innerHeight;\n\nconst context = canvas.getContext('2d');\n\n//instantiating background and raft\n\nconst game = new Game(canvas, context);\nnew View(canvas, context, game).animate();\n\n//creating game loop\n\ndocument.addEventListener('click', () => {\n    game.raft.flashSquares(5)\n})\n\n","import Raft from './raft'\nimport Player from './player'\n\nclass Game {\n    constructor(canvas, context) {\n        this.raft = new Raft(canvas, context)\n        this.player = new Player()\n    }\n\n    play() {\n        while (this.player.status === 'alive') {\n            this.raft.flashSquares(20)\n            let userChoice = this.player.chooseSquare(1, 1)\n            this.raft.dropSquares()\n            if (this.raft.grid[userChoice[0]][userChoice[1]] === 'X') {\n                console.log('you lose')\n                this.player.status = 'dead'\n            } else {\n                console.log('you survived!')\n            }\n        }\n        console.log('exited loop')\n    }\n}\n\nexport default Game;","import Tile from './tile'\n\nclass Raft {\n    constructor(canvas, context) {\n        this.grid = this.makeGrid()\n        this.size = this.getSize()\n        this.canvas = canvas\n        this.c = context\n    }\n\n\n\n    makeGrid() {\n        let grid = []\n        let color = '#A46233'\n        for (let i = 0; i < 7; i++) {\n            grid.push([])\n            for (let j = 0; j < 7; j++) {\n                grid[i].push(new Tile(i, j, color))\n                color = this.colorSwitch(color)\n            }\n        }\n        return grid\n    }\n\n    getSize() {\n        let size = 0\n        for (let i = 0; i < this.grid.length; i++) {\n            for (let j = 0; j < this.grid[0].length; j++) {\n                size++\n            }\n        }\n        return size\n    }\n\n    flashSquares(percent) {\n        let squaresToFlash = Math.floor(this.size * (percent / 100))\n        let dimension = Math.sqrt(this.size)\n\n        while (squaresToFlash > 0) {\n            //choosing a random square to flash\n            let x = Math.floor((Math.random() * dimension))\n            let y = Math.floor((Math.random() * dimension))\n            \n            //checking if random square is already flashing (will try again if not)\n            let tile = this.grid[x][y];\n            if (!tile.flashing()) {\n                tile.flash();\n                squaresToFlash--\n            }\n            // console.log(squaresToFlash)\n        }\n        this.draw(this.c)\n    }\n\n    // flashing(tile) {\n    //     let [x, y] = square\n    //     console.log(x)\n    //     console.log(y)\n    //     console.log(this.grid[x][y].color)\n    //     if (this.grid[x][y].color === '#FF0000') {\n    //         console.log('decrement')\n    //         return true\n    //     } else {\n    //         console.log('stay same')\n    //         return false\n    //     }\n    // }\n\n    dropSquares() {\n        for (let i = 0; i < Math.sqrt(this.size); i++) {\n            for (let j = 0; j < Math.sqrt(this.size); j++) {\n                if (this.grid[i][j] === 'W') {\n                    this.grid[i][j] = 'X'\n                }\n            }\n        }\n    }\n\n    resetSquares() {\n        for (let i = 0; i < Math.sqrt(this.size); i++) {\n            for (let j = 0; j < Math.sqrt(this.size); j++) {\n                this.grid[i][j] = 'O'\n            }\n        }   \n    }\n\n    draw(ctx) {\n            let tileArr = []\n            let color = undefined\n            for (let i = 0; i < 7; i++) {\n                for (let j = 0; j < 7; j++) {\n                    tileArr.push(new Tile(i, j, color))\n                    color = this.colorSwitch(color);\n                }\n            }\n    \n            let midX = this.canvas.width / 2\n            let midY = this.canvas.height / 2\n    \n            for (let i = 0; i < tileArr; i++) {\n                let tile = tileArr[i]\n                this.c.fillStyle = tile.color\n                this.c.fillRect((tile.x * 100) + midX - 350, (tile.y * 100) + midY - 350, 100, 100)\n            }\n        \n            for (let i = 0; i < Math.sqrt(this.size); i++) {\n                for (let j = 0; j < Math.sqrt(this.size); j++) {\n                    let tile = this.grid[i][j]\n                    this.c.fillStyle = tile.color;\n                    this.c.fillRect((tile.x * 100) + midX - 350, (tile.y * 100) + midY - 350, 100, 100)\n\n                }\n            }\n    }\n\n    colorSwitch(color) {\n        if (color === '#A46233') {\n            return \"#8B4513\"\n        } else {\n            return '#A46233'\n        }\n    }\n\n\n}\n\nexport default Raft;","class Player {\n    constructor() {\n        this.status = 'alive'\n    }\n\n    chooseSquare(x, y) {\n        return [x, y]\n    }\n\n}\n\nexport default Player;","import Tile from './tile'\nimport Game from './game'\n\nclass View {\n    constructor(canvas, context, game) {\n        this.canvas = canvas\n        // this.canvas.width = window.innerWidth;\n        // this.canvas.height = window.innerHeight;\n        this.c = context\n        this.startX = (this.canvas.width / 2) - 250;\n        this.startY = (this.canvas.height / 2) - 250;\n        this.game = game\n        this.background = new Image();\n    }\n\n    animate() {\n        // set up animation to render new frames\n        this.c.clearRect(0, 0, this.canvas.width, this.canvas.height);\n        requestAnimationFrame(this.animate.bind(this));\n    \n        // load background image\n        this.background.src = './assets/aqua.jpg'\n        this.c.drawImage(this.background, 0, 0);\n        \n        this.game.raft.draw(this.c);\n    }\n}\n\nexport default View;"],"names":["Tile","constructor","x","y","color","this","originalColor","status","flash","FLASHING","flashing","sink","SUNK","canvas","document","querySelector","width","window","innerWidth","height","innerHeight","context","getContext","game","raft","grid","makeGrid","size","getSize","c","i","push","j","colorSwitch","length","flashSquares","percent","squaresToFlash","Math","floor","dimension","sqrt","random","tile","draw","dropSquares","resetSquares","ctx","tileArr","midX","midY","fillStyle","fillRect","player","chooseSquare","play","userChoice","console","log","startX","startY","background","Image","animate","clearRect","requestAnimationFrame","bind","src","drawImage","addEventListener"],"sourceRoot":""}
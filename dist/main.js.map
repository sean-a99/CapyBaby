{"version":3,"file":"main.js","mappings":"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","sources":["webpack://capybaby/./src/scripts/tile.js","webpack://capybaby/./src/index.js","webpack://capybaby/./src/scripts/raft.js"],"sourcesContent":["class Tile {\n    constructor(x, y, color) {\n        this.x = x;\n        this.y = y;\n        this.color = color;\n        this.originalColor = color;\n    }\n}\n\nexport default Tile;","import View from \"./scripts/view\"\nimport Raft from \"./scripts/raft\"\nimport Player from \"./scripts/player\"\nimport Game from \"./scripts/game\"\n\nconst canvas = document.querySelector('canvas')\ncanvas.width = window.innerWidth;\ncanvas.height = window.innerHeight;\n\nconst context = canvas.getContext('2d')\nconsole.log(context)\n\nconst background = new Image();\nconst raft = new Raft(canvas, context)\n\nfunction animate() {\n    requestAnimationFrame(animate)\n    background.src = './assets/aqua.jpg'\n    context.drawImage(background, 0, 0)\n    // const view = new View(canvas, context)\n    raft.draw(context)\n    \n}\n\nraft.FlashSquares(10)\nanimate()","import Tile from './tile'\n\nclass Raft {\n    constructor(canvas, context) {\n        this.grid = this.makeGrid()\n        this.size = this.getSize()\n        this.canvas = canvas\n        this.c = context\n\n    }\n\n\n\n    makeGrid() {\n        let grid = []\n        let color = '#A46233'\n        for (let i = 0; i < 7; i++) {\n            grid.push([])\n            for (let j = 0; j < 7; j++) {\n                grid[i].push(new Tile(i, j, color))\n                color = this.colorSwitch(color)\n            }\n        }\n        return grid\n    }\n\n    getSize() {\n        let size = 0\n        for (let i = 0; i < this.grid.length; i++) {\n            for (let j = 0; j < this.grid[0].length; j++) {\n                size++\n            }\n        }\n        return size\n    }\n\n    FlashSquares(percent) {\n        let squaresToFlash = Math.floor(this.size * (percent / 100))\n        let dimension = Math.sqrt(this.size)\n\n        while (squaresToFlash > 0) {\n            let x = Math.floor((Math.random() * dimension))\n            let y = Math.floor((Math.random() * dimension))\n            if (!this.flashing([x, y])) {\n                this.grid[x][y].color = '#FF0000'\n                squaresToFlash--\n            }\n            console.log(squaresToFlash)\n        }\n        this.draw(this.c)\n    }\n\n    flashing(square) {\n        let [x, y] = square\n        console.log(x)\n        console.log(y)\n        console.log(this.grid[x][y].color)\n        if (this.grid[x][y].color === '#FF0000') {\n            console.log('decrement')\n            return true\n        } else {\n            console.log('stay same')\n            return false\n        }\n    }\n\n    dropSquares() {\n        for (let i = 0; i < Math.sqrt(this.size); i++) {\n            for (let j = 0; j < Math.sqrt(this.size); j++) {\n                if (this.grid[i][j] === 'W') {\n                    this.grid[i][j] = 'X'\n                }\n            }\n        }\n    }\n\n    resetSquares() {\n        for (let i = 0; i < Math.sqrt(this.size); i++) {\n            for (let j = 0; j < Math.sqrt(this.size); j++) {\n                this.grid[i][j] = 'O'\n            }\n        }   \n    }\n\n    draw(ctx) {\n            let tileArr = []\n            let color = undefined\n            for (let i = 0; i < 7; i++) {\n                for (let j = 0; j < 7; j++) {\n                    tileArr.push(new Tile(i, j, color))\n                    color = this.colorSwitch(color);\n                }\n            }\n    \n            let midX = this.canvas.width / 2\n            let midY = this.canvas.height / 2\n    \n            for (let i = 0; i < tileArr; i++) {\n                let tile = tileArr[i]\n                this.c.fillStyle = tile.color\n                this.c.fillRect((tile.x * 100) + midX - 350, (tile.y * 100) + midY - 350, 100, 100)\n            }\n        \n            for (let i = 0; i < Math.sqrt(this.size); i++) {\n                for (let j = 0; j < Math.sqrt(this.size); j++) {\n                    let tile = this.grid[i][j]\n                    this.c.fillStyle = tile.color;\n                    this.c.fillRect((tile.x * 100) + midX - 350, (tile.y * 100) + midY - 350, 100, 100)\n\n                }\n            }\n    }\n\n    colorSwitch(color) {\n        if (color === '#A46233') {\n            return \"#8B4513\"\n        } else {\n            return '#A46233'\n        }\n    }\n\n\n}\n\nexport default Raft;"],"names":["constructor","x","y","color","this","originalColor","canvas","document","querySelector","width","window","innerWidth","height","innerHeight","context","getContext","console","log","background","Image","raft","grid","makeGrid","size","getSize","c","i","push","j","Tile","colorSwitch","length","FlashSquares","percent","squaresToFlash","Math","floor","dimension","sqrt","random","flashing","draw","square","dropSquares","resetSquares","ctx","tileArr","midX","midY","tile","fillStyle","fillRect","animate","requestAnimationFrame","src","drawImage"],"sourceRoot":""}
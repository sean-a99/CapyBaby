{"version":3,"file":"main.js","mappings":"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","sources":["webpack://capybaby/./src/scripts/tile.js","webpack://capybaby/./src/index.js","webpack://capybaby/./src/scripts/game.js","webpack://capybaby/./src/scripts/raft.js","webpack://capybaby/./src/scripts/player.js","webpack://capybaby/./src/scripts/view.js"],"sourcesContent":["class Tile {\n    constructor(x, y, color) {\n        this.x = x;\n        this.y = y;\n        this.color = color;\n        this.originalColor = color;\n        this.status = 'floating'\n    }\n\n    flash() {\n        this.color = Tile.FLASHING\n        this.status = 'flashing'\n    }\n\n    flashing() {\n        return this.color === Tile.FLASHING\n    }\n\n    sink() {\n        this.color = Tile.SUNK;\n        this.status = 'sunk'\n    }\n\n    reset() {\n        this.color = this.originalColor;\n        this.status = 'floating';\n    }\n}\n\nTile.FLASHING = '#550077'\nTile.SUNK = '#000000'\n\nexport default Tile;","import View from \"./scripts/view\"\nimport Raft from \"./scripts/raft\"\nimport Player from \"./scripts/player\"\nimport Game from \"./scripts/game\"\n\n//setting up canvas & context\nconst canvas = document.querySelector('canvas')\ncanvas.width = window.innerWidth;\ncanvas.height = window.innerHeight;\n\nconst context = canvas.getContext('2d');\n\n//instantiating background and raft\n\nconst game = new Game(canvas, context);\nnew View(canvas, context, game).start();\n\n//creating game loop\n\ndocument.addEventListener('keydown', event => {\n    if (event.key === 'w') {\n        game.player.move(0, -100);\n    } else if (event.key === 'd') {\n        game.player.move(100, 0);\n    } else if (event.key === 's') {\n        game.player.move(0, 100);\n    } else if (event.key === 'a') {\n        game.player.move(-100, 0)\n    }\n})","import Raft from './raft'\nimport Player from './player'\n\nclass Game {\n    constructor(canvas, context) {\n        this.raft = new Raft(canvas, context)\n        this.player = new Player(canvas, context)\n        this.score = 0;\n    }\n\n    play() {\n        while (this.player.status === 'alive') {\n            this.raft.flashSquares(20)\n            let userChoice = this.player.chooseSquare(1, 1)\n            this.raft.dropSquares()\n            if (this.raft.grid[userChoice[0]][userChoice[1]] === 'X') {\n                console.log('you lose')\n                this.player.status = 'dead'\n            } else {\n                console.log('you survived!')\n            }\n        }\n        console.log('exited loop')\n    }\n\n\n    \n}\n\nexport default Game;","import Tile from './tile'\n\nclass Raft {\n    constructor(canvas, context) {\n        this.grid = this.makeGrid()\n        this.size = this.getSize()\n        this.canvas = canvas\n        this.c = context\n    }\n\n\n\n    makeGrid() {\n        let grid = []\n        let color = '#A46233'\n        for (let i = 0; i < 7; i++) {\n            grid.push([])\n            for (let j = 0; j < 7; j++) {\n                grid[i].push(new Tile(i, j, color))\n                color = this.colorSwitch(color)\n            }\n        }\n        return grid\n    }\n\n    getSize() {\n        let size = 0\n        for (let i = 0; i < this.grid.length; i++) {\n            for (let j = 0; j < this.grid[0].length; j++) {\n                size++\n            }\n        }\n        return size\n    }\n\n    flashSquares(percent) {\n        let squaresToFlash = Math.floor(this.size * (percent / 100))\n        let dimension = Math.sqrt(this.size)\n\n        while (squaresToFlash > 0) {\n            //choosing a random square to flash\n            let x = Math.floor((Math.random() * dimension))\n            let y = Math.floor((Math.random() * dimension))\n            \n            //checking if random square is already flashing (will try again if not)\n            let tile = this.grid[x][y];\n            if (!tile.flashing()) {\n                tile.flash();\n                squaresToFlash--\n            }\n        }\n        this.draw()\n    }\n\n    dropSquares() {\n        for (let i = 0; i < Math.sqrt(this.size); i++) {\n            for (let j = 0; j < Math.sqrt(this.size); j++) {\n                let tile = this.grid[i][j]\n                if (tile.status === 'flashing') {\n                    tile.sink();\n                }\n            }\n        }\n    }\n\n    resetSquares() {\n        for (let i = 0; i < Math.sqrt(this.size); i++) {\n            for (let j = 0; j < Math.sqrt(this.size); j++) {\n                let tile = this.grid[i][j]\n                tile.reset();\n            }\n        }   \n    }\n\n    draw() {\n            let tileArr = []\n            let color = undefined\n            for (let i = 0; i < 7; i++) {\n                for (let j = 0; j < 7; j++) {\n                    tileArr.push(new Tile(i, j, color))\n                    color = this.colorSwitch(color);\n                }\n            }\n    \n            let midX = this.canvas.width / 2\n            let midY = this.canvas.height / 2\n        \n            for (let i = 0; i < Math.sqrt(this.size); i++) {\n                for (let j = 0; j < Math.sqrt(this.size); j++) {\n                    let tile = this.grid[i][j]\n                    if (tile.status !== 'sunk') {\n                        this.c.fillStyle = tile.color;\n                        this.c.fillRect((tile.x * 100) + midX - 350, (tile.y * 100) + midY - 350, 100, 100)\n                    }\n                }\n            }\n    }\n\n    colorSwitch(color) {\n        if (color === '#A46233') {\n            return \"#8B4513\"\n        } else {\n            return '#A46233'\n        }\n    }\n\n\n}\n\nexport default Raft;","class Player {\n    constructor(canvas, context) {\n        this.status = 'alive'\n        this.size = 50;\n        this.startPos = [canvas.width/2 - this.size/2, canvas.height/2 - this.size/2]\n        this.pos = this.startPos\n        this.c = context\n        this.canvas = canvas\n        this.capy = new Image();\n    }\n\n    chooseSquare(x, y) {\n        return [x, y]\n    }\n\n    printPos() {\n        let [x, y] = this.pos\n        this.capy.src = '../assets/walk/capywalk1.png'\n        this.c.fillStyle = '#000000'\n        this.c.drawImage(this.capy,x, y)\n    }\n\n    move(dx, dy) {\n        let [x, y] = this.pos;\n        x += dx\n        y += dy\n        this.pos = [x, y]\n    }\n\n}\n\nexport default Player;","import Tile from './tile'\nimport Game from './game'\n\nclass View {\n    constructor(canvas, context, game) {\n        this.canvas = canvas\n        // this.canvas.width = window.innerWidth;\n        // this.canvas.height = window.innerHeight;\n        this.c = context\n        this.startX = (this.canvas.width / 2) - 250;\n        this.startY = (this.canvas.height / 2) - 250;\n        this.game = game\n        this.background = new Image();\n        this.background.src = './assets/aqua.jpg'\n    }\n\n    animate() {\n        // set up animation to render new frames\n        this.c.clearRect(0, 0, this.canvas.width, this.canvas.height);\n        requestAnimationFrame(this.animate.bind(this));\n    \n        // load background image\n        this.c.drawImage(this.background, 0, 0);\n        \n        this.game.raft.draw();\n        this.game.player.printPos();\n        this.scoreboard();\n    }\n\n    start() {\n        this.loop()\n        requestAnimationFrame(this.animate.bind(this))\n    }\n\n    loop() {\n        let counter = 0;\n        setInterval(() => {\n            if (counter % 3 === 0) {\n                this.game.raft.flashSquares(80);\n            } else if (counter % 3 === 1) {\n                this.game.raft.dropSquares();\n            } else {\n                this.game.raft.resetSquares();\n                this.game.score += 100;\n            }\n            counter++\n        }, 800)\n    }\n\n    scoreboard() {\n        this.c.fillStyle = 'rgba(100, 100, 100, .6)'\n        this.c.fillRect(0, 0, 300, 100)\n        this.c.font = '30px sans serif'\n        this.c.fillStyle = '#FFFFFF'\n        this.c.fillText(`SCORE:      ${this.game.score}`, 30, 60)\n        console.log(this.c)\n    }\n}\n\nexport default View;"],"names":["Tile","constructor","x","y","color","this","originalColor","status","flash","FLASHING","flashing","sink","SUNK","reset","canvas","document","querySelector","width","window","innerWidth","height","innerHeight","context","getContext","game","raft","grid","makeGrid","size","getSize","c","i","push","j","colorSwitch","length","flashSquares","percent","squaresToFlash","Math","floor","dimension","sqrt","random","tile","draw","dropSquares","resetSquares","tileArr","midX","midY","fillStyle","fillRect","player","startPos","pos","capy","Image","chooseSquare","printPos","src","drawImage","move","dx","dy","score","play","userChoice","console","log","startX","startY","background","animate","clearRect","requestAnimationFrame","bind","scoreboard","start","loop","counter","setInterval","font","fillText","addEventListener","event","key"],"sourceRoot":""}